% LPS visualisation for self-driving car
% Define street as: street(StreetName, coordinate(X, Y), Width, Height, Number_of_lane) eg: street(piccadillyRoad, coordinate(9, 9), 80, 70, 2)
% Define location of car as location(Name_of_car, coordinate(X, Y), Direction) eg: location(yourCar, coordinate(9, 9), eastward)
% Define traffic light as trafficLight(coordinate(X, Y), Working_status, Color, FacingDirection) eg: trafficLight(coordinate(2, 2), on, Red, eastward)

% we assume the destination is reachable
% and car length is 40 x 40 based on the image
% speed is 5 unit per cycle.

% this part of the code is the demo for cars has different speed this do not
% comply with the UI yet including user adding cars delete cars and change cars.


maxTime(500).
cycleInterval(1).

loadModule('../scripts/module.js').

fluents([
  velocity(VehicleName, Speed),
  stopped(VehicleName),
  moving(VehicleName),
  coordinate(X, Y),
  location(VehicleName, coordinate(X, Y), Direction),
  trafficLight(coordinate(X, Y), Working_status, Color, FacingDirection),
  street(StreetName, coordinate(X, Y), Width, Height, Number_of_lane, Priority),
  goal(VehicleName,coordinate(X, Y))

]).

% % events will reserved for user input item to block the car
% events ([
%
% ]).

actions ([
  step(Vehicle, NextPlace),
  turn(Vehicle, NewHeading),
  arrive(Vehicle),
  changeSpeed(Vehicle,NewSpeed)
]).

initially([

  velocity(car0,1),
  velocity(car1,5),
  location(car0, coordinate(400, 175), eastward),
  location(car1, coordinate(200, 175), eastward),
  goal(car0,coordinate(970, 175)),
  goal(car1,coordinate(970, 175)),
  moving(car0),
  moving(car1)
]).

% define the junction coordinate
% junction(Name,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H))


street(mainStreet , coordinate(100, 150), 900, 50, 2,1).

street(mainStreet , coordinate(100, 200), 900, 50, 2,1).




cloud(coordinate(140,100)).
cloud(coordinate(250,90)).
cloud(coordinate(300,120)).
cloud(coordinate(640,100)).
cloud(coordinate(750,90)).
cloud(coordinate(800,120)).
% atTjunction(coordinate(A,B),junction(tJuntion1,coordinate(A1, A2),coordinate(B1, B2),coordinate(C1, C2),coordinate(D1, D2))) <-
%   X1==475,Y1==200,X2 == 525, Y2 == 200, X3==.
% atTjunction(tJuntion2,coordinate(475, 150),coordinate(525, 150),coordinate(475, 200),coordinate(525, 200)) <-
%   Xu==475,Yu==200,Xd == 9, Yd == 9.

% ---------------------------------Reactive rules---------------------------------------------
goal(Vehicle,coordinate(A, B)) from _ to T,
location(Vehicle, coordinate(X, Y), Direction), A==X, B==Y,moving(Vehicle) at T ->
  % testPrint(Vehicle+ ' we have arrived'),
  arrive(Vehicle) at T.


% goal(Vehicle,coordinate(A, B)) from _ to T,
% location(Vehicle, coordinate(X, Y), Direction),
%   moving(Vehicle) at T ->
%     % need to find the right direction here
%     % driving forward
%     % testPrint(Vehicle+' '+X+' '+Y+' Direction '+Direction + '----------------Reactive rule----------------'),
%     direction(Vehicle) at T.


goal(Vehicle,coordinate(A, B)) from T to T1,
location(Vehicle, coordinate(X, Y), Direction),
  moving(Vehicle) at T1 ->

    % testPrint(Vehicle + " start driving"),
    drive(Vehicle) from T1 to _.


% ---------------------------------------------------------------------------------------------
% the case where car is not at t junction.
direction(Vehicle) at T<-
  % testPrint('checking in Juntion or not ?'),
  location(Vehicle, coordinate(X, Y), _) at T,
  junction(tJuntion1,coordinate(A1, B1),coordinate(C1, D1),coordinate(E1, F1),coordinate(G1, H1)),
  junction(tJuntion2,coordinate(A2, B2),coordinate(C2, D2),coordinate(E2, F2),coordinate(G2, H2)),
  notAtTjunction(X,Y,A1,B1,C1,D1,E1,F1),
  notAtTjunction(X,Y,A2,B2,C2,D2,E2,F2).



notAtTjunction(X,Y,A,B,C,D,E,F)<-
  Y != (B+F)/2.
notAtTjunction(X,Y,A,B,C,D,E,F)<-
  X != (A+C)/2.


% you only turn when you are in the middle of the juction.
direction(Vehicle) at T<-
  % testPrint('checking in turnning westward or not ?'),
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  % junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  % X == (A+C)/2,
  % Y == (B+F)/2,
  P == Y,
  K < X,
  % testPrint(Vehicle +' turing westward'),
  turn(Vehicle,westward) at T.

direction(Vehicle) at T<-
  % testPrint('checking in turnning eastward or not ?'),
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  % junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  % X == (A+C)/2,
  % Y == (B+F)/2,
  P == Y,
  K > X,
  % testPrint(Vehicle +' turing eastward'),
  turn(Vehicle, eastward) at T.

direction(Vehicle) at T<-
  % testPrint('checking in turnning northward or not ?'),
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  % junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  % X == (A+C)/2,
  % Y == (B+F)/2,
  K == X,
  P < Y,
  % testPrint(Vehicle +' turing northward'),
  turn(Vehicle,northward) at T.

direction(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  % junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  % X == (A+C)/2,
  % Y == (B+F)/2,
  K == X,
  P > Y,
  % testPrint('checking in turnning or not ?'),
  % testPrint(Vehicle +' turing southward'),
  turn(Vehicle,southward) at T.

%  these are 6 cases of intention
intention(VehicleName, Plan) <-
  location(VehicleName, coordinate(X, Y), _),
  goal(VehicleName,coordinate(A, B)),
  X == A,
  Y != B,
  Plan = straight.

intention(VehicleName, Plan) <-
  location(VehicleName, coordinate(X, Y), _),
  goal(VehicleName,coordinate(A, B)),
  Y == B,
  X != A,
  Plan = straight.

intention(VehicleName, Plan) <-
  location(VehicleName, coordinate(X, Y), Direction),
  goal(VehicleName,coordinate(A, B)),
  Direction == northward,
  Y > B,
  X > A,
  Plan = turnLeft.

intention(VehicleName, Plan) <-
  location(VehicleName, coordinate(X, Y), Direction),
  goal(VehicleName,coordinate(A, B)),
  Direction == northward,
  Y > B,
  X < A,
  Plan = turnRight.

intention(VehicleName, Plan) <-
  location(VehicleName, coordinate(X, Y), Direction),
  goal(VehicleName,coordinate(A, B)),
  Direction == eastward,
  Y < B,
  X < A,
  Plan = turnRight.

intention(VehicleName, Plan) <-
  location(VehicleName, coordinate(X, Y), Direction),
  goal(VehicleName,coordinate(A, B)),
  Direction == westward,
  Y < B,
  X > A,
  Plan = turnLeft.

% ---------------------------------------------------------------------------------------------


% drive macro event.
drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == northward,
  velocity(Vehicle,Speed),
  NewY = Y - Speed,
  NextPlace = coordinate(X, NewY),
  % testPrint(Vehicle+ ' move northward'),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == southward,
  velocity(Vehicle,Speed),
  NewY = Y + Speed,
  NextPlace = coordinate(X, NewY),
  % testPrint(Vehicle+ ' move southward'),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == westward,
  velocity(Vehicle,Speed),
  NewX = X-Speed,
  NextPlace = coordinate(NewX, Y),
  % testPrint(Vehicle+ ' move westward'),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == eastward,
  velocity(Vehicle,Speed),
  NewX = X + Speed,
  NextPlace = coordinate(NewX, Y),
  % testPrint(Vehicle+ ' move eastward'),
  step(Vehicle, NextPlace) at T1.

% %----------------version 1--------------------------------
% % if Vehicle is at same horizontal level as its goal and there is another car whose
% clearRoute(Vehicle) at T<-
%   location(Vehicle, coordinate(X, Y), _),
%   goal(Vehicle,coordinate(P, Q)),
%   location(Vehicle2, coordinate(A, B), _),
%   Vehicle != Vehicle2,
%   Y == Q,
%   B != Q.
%
% clearRoute(Vehicle) at T<-
%   location(Vehicle, coordinate(X, Y), _),
%   goal(Vehicle,coordinate(P, Q)),
%   location(Vehicle2, coordinate(A, B), _),
%   Vehicle != Vehicle2,
%   A < X,
%   A < P.
%
% clearRoute(Vehicle) at T<-
%   location(Vehicle, coordinate(X, Y), _),
%   goal(Vehicle,coordinate(P, Q)),
%   location(Vehicle2, coordinate(A, B), _),
%   Vehicle != Vehicle2,
%   A < X,
%   A >= P,
%   abs(B-Y) >= 50.
%
% clearRoute(Vehicle) at T<-
%   location(Vehicle, coordinate(X, Y), _),
%   goal(Vehicle,coordinate(P, Q)),
%   location(Vehicle2, coordinate(A, B), _),
%   Vehicle != Vehicle2,
%   A > X,
%   A > P.

% ---------------------------------------------------------------------------------------------


% %----------------version 2--------------------------------
% % There are 6 cases in total that your route will be blocked
% if Vehicle is at same horizontal level as its goal and there is another car in between
blockedRoute(Vehicle,Vehicle2) at T<-
  location(Vehicle, coordinate(X1, Y1), Direction),
  Direction == eastward,
  goal(Vehicle,coordinate(A1, B1)),
  location(Vehicle2, coordinate(X2, Y2), _),
  Vehicle != Vehicle2,
  Y1 == B1,
  Y2 == B1,
  X2 >= X1,
  X2 <= A1.

% if Vehicle is at same horizontal level as its goal and there is another car in between
blockedRoute(Vehicle,Vehicle2) at T<-
  location(Vehicle, coordinate(X1, Y1), Direction),
  Direction == westward,
  goal(Vehicle,coordinate(A1, B1)),
  location(Vehicle2, coordinate(X2, Y2), _),
  Vehicle != Vehicle2,
  Y1 == B1,
  Y2 == B1,
  X2 >= A1,
  X2 <= X1.

% if Vehicle is at same vertical level as its goal and there is another car in between
blockedRoute(Vehicle,Vehicle2) at T<-
  location(Vehicle, coordinate(X1, Y1), Direction),
  Direction == northward,
  goal(Vehicle,coordinate(A1, B1)),
  location(Vehicle2, coordinate(X2, Y2), _),
  Vehicle != Vehicle2,
  X1 == A1,
  X2 == A1,
  Y2 >= B1,
  Y2 <= Y1.


% if Vehicle is at same vertical level as its goal and there is another car in between
blockedRoute(Vehicle,Vehicle2) at T<-
  location(Vehicle, coordinate(X1, Y1), Direction),
  Direction == southward,
  goal(Vehicle,coordinate(A1, B1)),
  location(Vehicle2, coordinate(X2, Y2), _),
  Vehicle != Vehicle2,
  X1 == A1,
  X2 == A1,
  Y2 >= Y1,
  Y2 <= B1.

% if there is in between a L shape Route car is turnning left from narrow street
blockedRoute(Vehicle,Vehicle2) at T<-
  location(Vehicle, coordinate(X1, Y1), Direction1),
  Direction1 == northward,
  goal(Vehicle,coordinate(A1, B1)),
  location(Vehicle2, coordinate(X2, Y2), Direction2),
  Direction2 == eastward,
  Vehicle != Vehicle2,
  X1 > A1,
  Y1 > B1,
  Y2 == B1,
  X2 > A1,
  X2 < B1.

% if there is in between a L shape Route, car is turnning right from narrow street
blockedRoute(Vehicle,Vehicle2) at T<-
  location(Vehicle, coordinate(X1, Y1), Direction1),
  Direction1 == northward,
  goal(Vehicle,coordinate(A1, B1)),
  location(Vehicle2, coordinate(X2, Y2), Direction2),
  Direction2 == westward,
  Vehicle != Vehicle2,
  X1 < A1,
  Y1 > B1,
  Y2 == B1,
  X2 > X1,
  X2 < A1.

% if there is sth in between a L shape Route, car is turnning right from main street
blockedRoute(Vehicle,Vehicle2) at T<-
  location(Vehicle, coordinate(X1, Y1), Direction1),
  Direction1 == eastward,
  goal(Vehicle,coordinate(A1, B1)),
  location(Vehicle2, coordinate(X2, Y2), Direction2),
  Direction2 == northward,
  Vehicle != Vehicle2,
  X1 < A1,
  Y1 < B1,
  X2 == A1,
  Y2 > Y1,
  Y2 < B1.

% if there is sth in between a L shape Route, car is turnning left from main street
blockedRoute(Vehicle,Vehicle2) at T<-
  location(Vehicle, coordinate(X1, Y1), Direction1),
  Direction1 == westward,
  goal(Vehicle,coordinate(A1, B1)),
  location(Vehicle2, coordinate(X2, Y2), Direction2),
  Direction2 == northward,
  Vehicle != Vehicle2,
  X1 > A1,
  Y1 < B1,
  X2 == A1,
  Y2 > Y1,
  Y2 < B1.


% ---------------------------------------------------------------------------------------------
% if you dont have a clear route you can not step
collisionPossible(Vehicle, Vehicle2) from T1 to T3,
  Vehicle != Vehicle2,
  velocity(Vehicle, S1),
  velocity(Vehicle2, S2),
  S1 > S2,
  blockedRoute(Vehicle,Vehicle2) at T1 ->
    overtaking(Vehicle,Vehicle2,T1,T3).

overtaking(Vehicle,Vehicle2,T1,T3) <-
  location(Vehicle, coordinate(X2, Y2), _) at T1,
  NewY = Y2+50,
  NewLocation = coordinate(X2, NewY),
  step(Vehicle, NewLocation,T2, T3).

not collisionPossible(Vehicle, Vehicle2) from T1 to T3,
  velocity(Vehicle, S1),
  velocity(Vehicle2, S2),
  location(Vehicle, coordinate(X1, Y1), _),
  location(Vehicle2, coordinate(X2, Y2), _),
  X1 > X2,
  Y1 > Y2,
  S1 > S2 ->
    navigateBack(Vehicle,T1,T3).

navigateBack(Vehicle,T1,T3)<-
  location(Vehicle, coordinate(X2, Y2), _) at T1,
  NewY = Y2-50,
  NewLocation = coordinate(X2, NewY),
  step(Vehicle, NewLocation,T3, _).

% % both car have clear routes but car on the narrow road can not step
% % (car on main street has higher priority)
% <- step(Vehicle, NextPlace),
%   not onMainRoad(Vehicle) at T,
%   collisionPossible(Vehicle, Vehicle2) at T,
%   Vehicle != Vehicle2,
%   onMainRoad(Vehicle2) at T,
%   not blockedRoute(Vehicle,Vehicle2) at T,
%   not blockedRoute(Vehicle2,Vehicle) at T.
%
% % both car have clear routes and both on the same street lane and have the same goal.
% <- step(Vehicle, NextPlace),
%   onMainRoad(Vehicle) at T,
%   collisionPossible(Vehicle, Vehicle2) at T,
%   Vehicle != Vehicle2,
%   onMainRoad(Vehicle2) at T,
%   not blockedRoute(Vehicle,Vehicle2) at T,
%   not blockedRoute(Vehicle2,Vehicle) at T,
%   intention(Vehicle,Plan),
%   intention(Vehicle2,Plan2),
%   Plan2 == straight.

% this is also not perfect need further development
<- step(Vehicle, NextPlace),
  collisionPossible(Vehicle, Vehicle2) at T,
  stopped(Vehicle2).

% case where car should not step forward is that your goal is on your left but you are facing in a wrong direction
<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  % street(_, coordinate(A, B), Width, Height, _, _),
  goal(Vehicle,coordinate(C, D)),
  A == C,
  D < B,
  Direction != northward.

% this bit need furter improvement.
<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  % street(_, coordinate(A, B), Width, Height, _, _),
  goal(Vehicle,coordinate(C, D)),
  A == C,
  D > B,
  Direction != southward.

<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  % street(_, coordinate(A, B), Width, Height, _, _),
  goal(Vehicle,coordinate(C, D)),
  D == B,
  C < A,
  Direction != westward.

<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  % street(_, coordinate(A, B), Width, Height, _, _),
  goal(Vehicle,coordinate(C, D)),
  D == B,
  C > A,
  Direction != eastward.

collisionPossible(Vehicle1, Vehicle2) at T <-

  location(Vehicle1, coordinate(X, Y), Direction1) at T,
  location(Vehicle2, coordinate(A, B), Direction2) at T,
  Vehicle1 != Vehicle2,
  % testPrint('collisionPossible' + Vehicle1 + ' '+Vehicle2),
  % there is a collision possiblity if the two direction are not the same
  % Direction1 != Direction2,
  warningZone(coordinate(X, Y),coordinate(A, B)).

% warnning zone is two times the length of the car plus 10
warningZone(coordinate(X, Y),coordinate(A, B)) <-
  Manhattan = abs(X-A) + abs(Y-B),
  % 80 is two times the length of the car.s
  % Manhattan <= 90.
  Manhattan <= 120.

onMainRoad(Vehicle) at T <-
  location(Vehicle, coordinate(X, Y), Direction1) at T,
  street(StreetName, coordinate(A, B), Width, Height, Number_of_lane, Priority),
  X<=A+Width, X>=A,
  Y<=B+Height, Y>=B,
  Priority > 0.


% ---------------------------------------------------------------------------------------------


updates(step(Vehicle, NextPlace), location(VehicleIns, OldPlace, Direction),  location(VehicleIns, NextPlace, Direction))<-
  VehicleIns == Vehicle.
  % ('updating loc ' + Vehicle + ' '+ NextPlace).

updates(turn(Vehicle, NewHeading) , location(VehicleIns, Place, OldHeading), location(VehicleIns, Place, NewHeading))<-
  Vehicle == VehicleIns.
  % ('updating turing ' + Vehicle + ' '+NewHeading).

terminates(arrive(Vehicle), moving(Vehicle)).
initiates(arrive(Vehicle), stopped(Vehicle)).

% % decision making will give a waiting state if car is not stopped
% terminates(decision_making(Vehicle), moving(Vehicle))<- not stopped(Vehicle).
% initiates(decision_making(Vehicle), waitting(Vehicle))<- not stopped(Vehicle).
