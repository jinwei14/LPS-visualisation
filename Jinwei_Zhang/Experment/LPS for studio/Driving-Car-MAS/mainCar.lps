maxTime(20).

loadModule(p2p).

p2pJoin(giving, 4100).

event(wantToMoveToGoal).

fluent(position(X,Y)).
fluent(notCollison).
action(move(X,Y)).
action(receiveInfo(X,Y)).

initially( [
  position(150, 340),
  notCollison
]).

observe(wantToMoveToGoal, 0, 20).


goal_location(800, 340).

wantToMoveToGoal ->
  checkCollision from T2 to T3,
  move(_,_).


move(Xnow+1,Ynow)<-
  position(Xnow, Xnow),
  goal_location(GX, GY),

  notCollison,
  GX != Xnow,
  GY != Ynow.


initiates(checkCollision, notCollison) <-
  p2pPeer(giving, P),

  p2pSend(giving, P, giving(X,Y)) from T1.

terminates(checkCollision, notCollison) <-
  p2pPeer(giving, P),

  p2pSend(sharing, P, giving(X,Y)) from T1.

p2pReceive(giving, P, retrieving, T1, T2) ->
  receiveLocation(Xother,Yother, T2, T3),
  position(X,Y),
  abs(X-Xother) + abs(Y-Yother) <= 100.

updates(move(X, Y), position(_,_), position(X,Y))<-
  goal_location(Agent,GX,GY),
  GX != X,
  GY!= Y.
