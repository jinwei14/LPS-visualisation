% --- Specification generated for test/programs/shopping.lps
% --- Start of cycle 1 ---
expect_num_of(fluent, 1, 5).
  expect(fluent, 1, shopQuantity(trekkingPants, 2)).
  expect(fluent, 1, shopQuantity(boots, 2)).
  expect(fluent, 1, shopQuantity(hat, 2)).
  expect(fluent, 1, shopQuantity(shirt, 2)).
  expect(fluent, 1, money(50)).

% --- Start of cycle 2 ---
expect_num_of(fluent, 2, 6).
  expect(fluent, 2, shopQuantity(boots, 2)).
  expect(fluent, 2, shopQuantity(hat, 2)).
  expect(fluent, 2, shopQuantity(shirt, 2)).
  expect(fluent, 2, shopQuantity(trekkingPants, 1)).
  expect(fluent, 2, money(35)).
  expect(fluent, 2, cartQuantity(trekkingPants, 1)).
expect_num_of(action, 1, 2, 1).
  expect(action, 1, 2, addToCart(trekkingPants)).
expect_num_of(observation, 1, 2, 0).
expect_num_of(firedRules, 2, 1).
expect_num_of(resolvedGoals, 2, 0).
expect_num_of(unresolvedGoals, 2, 1).
expect_num_of(failedGoals, 2, 0).

% --- Start of cycle 3 ---
expect_num_of(fluent, 3, 7).
  expect(fluent, 3, shopQuantity(hat, 2)).
  expect(fluent, 3, shopQuantity(shirt, 2)).
  expect(fluent, 3, shopQuantity(trekkingPants, 1)).
  expect(fluent, 3, shopQuantity(boots, 1)).
  expect(fluent, 3, cartQuantity(trekkingPants, 1)).
  expect(fluent, 3, cartQuantity(boots, 1)).
  expect(fluent, 3, money(15)).
expect_num_of(action, 2, 3, 1).
  expect(action, 2, 3, addToCart(boots)).
expect_num_of(observation, 2, 3, 0).
expect_num_of(firedRules, 3, 0).
expect_num_of(resolvedGoals, 3, 0).
expect_num_of(unresolvedGoals, 3, 1).
expect_num_of(failedGoals, 3, 0).

% --- Start of cycle 4 ---
expect_num_of(fluent, 4, 7).
  expect(fluent, 4, shopQuantity(hat, 2)).
  expect(fluent, 4, shopQuantity(shirt, 2)).
  expect(fluent, 4, shopQuantity(boots, 1)).
  expect(fluent, 4, shopQuantity(trekkingPants, 0)).
  expect(fluent, 4, cartQuantity(boots, 1)).
  expect(fluent, 4, cartQuantity(trekkingPants, 2)).
  expect(fluent, 4, money(0)).
expect_num_of(action, 3, 4, 1).
  expect(action, 3, 4, addToCart(trekkingPants)).
expect_num_of(observation, 3, 4, 0).
expect_num_of(firedRules, 4, 0).
expect_num_of(resolvedGoals, 4, 0).
expect_num_of(unresolvedGoals, 4, 1).
expect_num_of(failedGoals, 4, 0).

% --- Start of cycle 5 ---
expect_num_of(fluent, 5, 7).
  expect(fluent, 5, shopQuantity(hat, 2)).
  expect(fluent, 5, shopQuantity(shirt, 2)).
  expect(fluent, 5, shopQuantity(boots, 1)).
  expect(fluent, 5, shopQuantity(trekkingPants, 0)).
  expect(fluent, 5, cartQuantity(boots, 1)).
  expect(fluent, 5, cartQuantity(trekkingPants, 2)).
  expect(fluent, 5, money(0)).
expect_num_of(action, 4, 5, 1).
  expect(action, 4, 5, checkout).
expect_num_of(observation, 4, 5, 0).
expect_num_of(firedRules, 5, 0).
expect_num_of(resolvedGoals, 5, 1).
expect_num_of(unresolvedGoals, 5, 0).
expect_num_of(failedGoals, 5, 0).

