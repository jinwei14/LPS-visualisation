% we assume the destination is reachable
% and car length is 40 x 40 based on the image
% speed is 5 unit per cycle.
maxTime(500).
% cycleInterval(50).

loadModule('../scripts/module.js').

fluents([
   coordinate(X, Y),
   location(VehicleName, coordinate(X, Y), Direction),
   trafficLight(coordinate(X, Y), Working_status, Color, FacingDirection),
   street(StreetName, coordinate(X, Y), Width, Height, Number_of_lane, Priority),
   goal(VehicleName,coordinate(X, Y)),
   % define the junction coordinate
   junction(Name,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H))
]).

% events will reserved for traffic lights
events ([

]).

actions ([
  step(Vehicle, NextPlace),
  turn(Vehicle, NewHeading)
]).

initially([
  location(carA, coordinate(120, 225), eastward),
  location(carB, coordinate(500, 580), northward),
  goal(carA,coordinate(980, 225)),
  goal(carB,coordinate(120, 225)),
  street(mainStreet , coordinate(100, 200), 900, 50, 1,1),
  street(southStreet , coordinate(475, 250), 50, 500, 1,0),
  junction(tJuntion,coordinate(475, 200),coordinate(525, 200),coordinate(475, 250),coordinate(525, 250))
]).

goal(Vehicle,coordinate(A, B)) from _ to T,
location(VehicleName, coordinate(X, Y), Direction), A!=X at T ->
  % need to find the right direction here
  % driving forward
  direction(VehicleName),
  drive(Vehicle) from T to _.

goal(Vehicle,coordinate(A, B)) from _ to T,
location(VehicleName, coordinate(X, Y), Direction), B!=Y at T ->
  % need to find the right direction here
  % driving forward
  direction(VehicleName),
  drive(Vehicle) from T to _.

% you only turn when you are in the middle of the juction.
direction(Vehicle) <-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  P == Y,
  K < X,
  turn(Vehicle,westward).

direction(Vehicle) <-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  P == Y,
  K > X,
  turn(Vehicle,eastward).

direction(Vehicle) <-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  K == X,
  P < Y,
  turn(Vehicle,northward).

direction(Vehicle) <-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  K == X,
  P > Y,
  turn(Vehicle,southward).

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == northward,
  NewY = Y - 5,
  NextPlace = coordinate(X, NewY),
  step(Vehicle, NextPlace) from T1 to T2.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == southward,
  NewY = Y + 5,
  NextPlace = coordinate(X, NewY),
  step(Vehicle, NextPlace) from T1 to T2.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == westward,
  NewX = X-5,
  NextPlace = coordinate(NewX, Y),
  step(Vehicle, NextPlace) from T1 to T2.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == eastward,
  NewX = X + 5,
  NextPlace = coordinate(NewX, Y),
  step(Vehicle, NextPlace) from T1 to T2.

% step is false if the car is moving into a junction, not on main Road and there is a collision.
<- step(Vehicle, NextPlace),
  not onMainRoad(Vehicle),
  collisionPossible(Vehicle, Vehicle2).

collisionPossible(Vehicle1, Vehicle2) at T <-
  location(Vehicle1, coordinate(X, Y), Direction1) at T,
  location(Vehicle2, coordinate(A, B), Direction2) at T,
  % there is a collision possiblity if the two direction are not the same
  Direction1 != Direction2,
  warningZone(coordinate(X, Y),coordinate(A, B)).

warningZone(coordinate(X, Y),coordinate(A, B)) <-
  Manhattan = abs(X-A) + abs(Y-B),
  Manhattan < 80.

onMainRoad(Vehicle) at T <-
  location(Vehicle, coordinate(X, Y), Direction1) at T,
  street(StreetName, coordinate(A, B), Width, Height, Number_of_lane, Priority),
  X<=A+Width, X>=A,
  Y<=B+Height, Y>=B,
  Priority > 0.



updates(step(Vehicle, NextPlace), location(VehicleName, OldPlace, Direction),  location(Vehicle, NextPlace, Direction)).

updates(turn(Vehicle, NewHeading) , location(Vehicle, Place, OldHeading), location(Vehicle, Place, NewHeading)).
