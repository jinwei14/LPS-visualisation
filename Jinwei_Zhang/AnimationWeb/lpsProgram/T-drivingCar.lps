% we assume the destination is reachable
% and car length is 40 x 40 based on the image
% speed is 5 unit per cycle.
maxTime(200).
cycleInterval(50).

loadModule('../scripts/module.js').

fluents([
  stopped(VehicleName),
  moving(VehicleName),
  coordinate(X, Y),
  location(VehicleName, coordinate(X, Y), Direction),
  trafficLight(coordinate(X, Y), Working_status, Color, FacingDirection),
  street(StreetName, coordinate(X, Y), Width, Height, Number_of_lane, Priority),
  goal(VehicleName,coordinate(X, Y)),
  % define the junction coordinate
  junction(Name,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H))
]).

% events will reserved for traffic lights
events ([

]).

actions ([
  step(Vehicle, NextPlace),
  turn(Vehicle, NewHeading),
  arrive(Vehicle)
]).

initially([
  moving(carA),
  moving(carB),
  % % normal start
  location(carA, coordinate(145, 225), eastward),
  location(carB, coordinate(500, 580), northward),

  % %  start from Tjunction
  % location(carA, coordinate(500, 225), eastward),
  % location(carB, coordinate(500 ,270), northward),

  % %  start from goal townPosition
  % location(carA, coordinate(980, 225), eastward),
  % location(carB, coordinate(120 ,225), northward),

  goal(carA,coordinate(980, 225)),
  goal(carB,coordinate(120, 225)),
  street(mainStreet , coordinate(100, 200), 900, 50, 1,1),
  street(southStreet , coordinate(475, 250), 50, 500, 1,0),
  junction(tJuntion,coordinate(475, 200),coordinate(525, 200),coordinate(475, 250),coordinate(525, 250))
]).

% ---------------------------------Reactive rules---------------------------------------------
goal(Vehicle,coordinate(A, B)) from _ to T,
location(Vehicle, coordinate(X, Y), Direction), A==X, B==Y,moving(Vehicle) at T ->
  arrive(Vehicle) at T.


goal(Vehicle,coordinate(A, B)) from _ to T,
location(Vehicle, coordinate(X, Y), Direction),
  moving(Vehicle) at T ->
    % need to find the right direction here
    % driving forward
    direction(Vehicle) at T.


goal(Vehicle,coordinate(A, B)) from T to T1,
location(Vehicle, coordinate(X, Y), Direction),
  moving(Vehicle) at T1 ->

    drive(Vehicle) from T1 to _.


% ---------------------------------------------------------------------------------------------
% the case where car is not at t junction.
direction(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), _),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  notAtTjunction(X,Y,A,B,C,D,E,F).



notAtTjunction(X,Y,A,B,C,D,E,F)<-
  Y != (B+F)/2.
notAtTjunction(X,Y,A,B,C,D,E,F)<-
  X != (A+C)/2.


% you only turn when you are in the middle of the juction.
direction(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  P == Y,
  K < X,
  turn(Vehicle,westward) at T.

direction(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  P == Y,
  K > X,
  turn(Vehicle, eastward) at T.

direction(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  K == X,
  P < Y,
  turn(Vehicle,northward) at T.

direction(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  K == X,
  P > Y,
  turn(Vehicle,southward) at T.








% ---------------------------------------------------------------------------------------------


% drive macro envent.
drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == northward,
  NewY = Y - 5,
  NextPlace = coordinate(X, NewY),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == southward,
  NewY = Y + 5,
  NextPlace = coordinate(X, NewY),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == westward,
  NewX = X-5,
  NextPlace = coordinate(NewX, Y),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == eastward,
  NewX = X + 5,
  NextPlace = coordinate(NewX, Y),
  step(Vehicle, NextPlace) at T1.

% ---------------------------------------------------------------------------------------------
%step is false if the car is moving into a junction, not on main Road and there is a collision.
% this part need further developemnt for other cases
<- step(Vehicle, NextPlace),
  not onMainRoad(Vehicle) at T,
  collisionPossible(Vehicle, Vehicle2) at T.

% this bit need furter improvement.
% case where car should not step forward
<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  goal(Vehicle,coordinate(C, D)),
  A == C,
  D < B,
  Direction != northward.


<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  goal(Vehicle,coordinate(C, D)),
  A == C,
  D > B,
  Direction != southward.

<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  goal(Vehicle,coordinate(C, D)),
  D == B,
  C < A,
  Direction != westward.

<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  goal(Vehicle,coordinate(C, D)),
  D == B,
  C > A,
  Direction != eastward.

collisionPossible(Vehicle1, Vehicle2) at T <-

  location(Vehicle1, coordinate(X, Y), Direction1) at T,
  location(Vehicle2, coordinate(A, B), Direction2) at T,
  Vehicle1 != Vehicle2,
  % there is a validation possiblity if the two direction are not the same
  Direction1 != Direction2,
  warningZone(coordinate(X, Y),coordinate(A, B)).

warningZone(coordinate(X, Y),coordinate(A, B)) <-
  Manhattan = abs(X-A) + abs(Y-B),
  % 80 is two times the length of the car.
  Manhattan <= 90.

onMainRoad(Vehicle) at T <-
  location(Vehicle, coordinate(X, Y), Direction1) at T,
  street(StreetName, coordinate(A, B), Width, Height, Number_of_lane, Priority),
  X<=A+Width, X>=A,
  Y<=B+Height, Y>=B,
  Priority > 0.


% ---------------------------------------------------------------------------------------------


updates(step(Vehicle, NextPlace), location(VehicleIns, OldPlace, Direction),  location(VehicleIns, NextPlace, Direction))<-
  VehicleIns == Vehicle.

updates(turn(Vehicle, NewHeading) , location(VehicleIns, Place, OldHeading), location(VehicleIns, Place, NewHeading))<-
  Vehicle == VehicleIns.

terminates(arrive(Vehicle), moving(Vehicle)).
initiates(arrive(Vehicle), stopped(Vehicle)).
