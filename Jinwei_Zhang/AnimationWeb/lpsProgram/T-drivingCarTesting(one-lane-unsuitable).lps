% we assume the destination is reachable
% and car length is 40 x 40 based on the image
% speed is 5 unit per cycle.
% LPS visualisation for self-driving car
% Define street as: street(StreetName, coordinate(X, Y), Width, Height, Number_of_lane) eg: street(piccadillyRoad, coordinate(9, 9), 80, 70, 2)
% Define location of car as location(Name_of_car, coordinate(X, Y), Direction) eg: location(yourCar, coordinate(9, 9), eastward)
% Define traffic light as trafficLight(coordinate(X, Y), Working_status, Color, FacingDirection) eg: trafficLight(coordinate(2, 2), on, Red, eastward)

maxTime(170).
cycleInterval(50).

loadModule('../scripts/module.js').

fluents([
  stopped(VehicleName),
  moving(VehicleName),
  coordinate(X, Y),
  location(VehicleName, coordinate(X, Y), Direction),
  trafficLight(coordinate(X, Y), Working_status, Color, FacingDirection),
  street(StreetName, coordinate(X, Y), Width, Height, Number_of_lane, Priority),
  goal(VehicleName,coordinate(X, Y)),
  % define the junction coordinate
  junction(Name,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H))
]).

% events will reserved for traffic lights
events ([

]).

actions ([
  step(Vehicle, NextPlace),
  turn(Vehicle, NewHeading),
  arrive(Vehicle)
]).

initially([
  moving(carA),
  moving(carB),
  % % normal start one on the mainstreet and other on the southStreet
  %   % carA wants to go straight from mainStreet, carB want to turn left from southStreet
  % location(carA, coordinate(145, 225), eastward),
  % location(carB, coordinate(500, 580), northward),
  % goal(carA,coordinate(980, 225)),
  % goal(carB,coordinate(120, 225))

  % %  carA start from Tjunction
  % location(carA, coordinate(500, 225), eastward),
  % location(carB, coordinate(500 ,270), northward),
  % goal(carA,coordinate(980, 225)),
  % goal(carB,coordinate(120, 225))

% %same goal on the  mainStreet
%   location(carA, coordinate(145, 225), eastward),
%   location(carB, coordinate(500, 580), northward),
%   goal(carA,coordinate(980, 225)),
%   goal(carB,coordinate(980, 225))

%carB turn right from southStreet, carA turn right from mainStreet
location(carA, coordinate(145, 225), eastward),
location(carB, coordinate(500, 580), northward),
  goal(carA,coordinate(500, 580)),
  goal(carB,coordinate(980, 225))



  % % carA carB drivr opposite to each other
  %   location(carA, coordinate(450, 225), eastward),
  %   location(carB, coordinate(980 ,225), westward),
  %   goal(carA,coordinate(980, 225)),
  %   goal(carB,coordinate(450, 225))



  % % carA carB both has clear route and turning down to the southStreet
  %   location(carA, coordinate(400, 225), eastward),
  %   location(carB, coordinate(600 ,225), westward),
  %   goal(carA,coordinate(500, 580)),
  %   goal(carB,coordinate(500, 580))


]).

street(mainStreet , coordinate(100, 200), 900, 50, 1,1).
street(southStreet , coordinate(475, 250), 50, 500, 1,0).
junction(tJuntion,coordinate(475, 200),coordinate(525, 200),coordinate(475, 250),coordinate(525, 250)).

% ---------------------------------Reactive rules---------------------------------------------
goal(Vehicle,coordinate(A, B)) from _ to T,
location(Vehicle, coordinate(X, Y), Direction), A==X, B==Y,moving(Vehicle) at T ->
  % testPrint(Vehicle+ ' we have arrived'),
  arrive(Vehicle) at T.


goal(Vehicle,coordinate(A, B)) from _ to T,
location(Vehicle, coordinate(X, Y), Direction),
  moving(Vehicle) at T ->
    % need to find the right direction here
    % driving forward
    % testPrint(Vehicle+' '+X+' '+Y+' Direction '+Direction + '----------------Reactive rule----------------'),
    direction(Vehicle) at T.


goal(Vehicle,coordinate(A, B)) from T to T1,
location(Vehicle, coordinate(X, Y), Direction),
  moving(Vehicle) at T1 ->

    % testPrint(Vehicle + " start driving"),
    drive(Vehicle) from T1 to _.


% ---------------------------------------------------------------------------------------------
% the case where car is not at t junction.
direction(Vehicle) at T<-
  % testPrint('checking in Juntion or not ?'),
  location(Vehicle, coordinate(X, Y), _) at T,
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  notAtTjunction(X,Y,A,B,C,D,E,F).



notAtTjunction(X,Y,A,B,C,D,E,F)<-
  Y != (B+F)/2.
notAtTjunction(X,Y,A,B,C,D,E,F)<-
  X != (A+C)/2.


% you only turn when you are in the middle of the juction.
direction(Vehicle) at T<-
  % testPrint('checking in turnning westward or not ?'),
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  P == Y,
  K < X,
  % testPrint(Vehicle +' turing westward'),
  turn(Vehicle,westward) at T.

direction(Vehicle) at T<-
  % testPrint('checking in turnning eastward or not ?'),
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  P == Y,
  K > X,
  % testPrint(Vehicle +' turing eastward'),
  turn(Vehicle, eastward) at T.

direction(Vehicle) at T<-
  % testPrint('checking in turnning northward or not ?'),
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  K == X,
  P < Y,
  % testPrint(Vehicle +' turing northward'),
  turn(Vehicle,northward) at T.

direction(Vehicle) at T<-
  % testPrint('checking in turnning southward or not ?'),
  location(Vehicle, coordinate(X, Y), Direction),
  goal(Vehicle,coordinate(K, P)),
  junction(tJuntion,coordinate(A, B),coordinate(C, D),coordinate(E, F),coordinate(G, H)),
  X == (A+C)/2,
  Y == (B+F)/2,
  K == X,
  P > Y,
  % testPrint(Vehicle +' turing southward'),
  turn(Vehicle,southward) at T.








% ---------------------------------------------------------------------------------------------


% drive macro event.
drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == northward,
  NewY = Y - 5,
  NextPlace = coordinate(X, NewY),
  % testPrint(Vehicle+ ' move northward'),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == southward,
  NewY = Y + 5,
  NextPlace = coordinate(X, NewY),
  % testPrint(Vehicle+ ' move southward'),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == westward,
  NewX = X-5,
  NextPlace = coordinate(NewX, Y),
  % testPrint(Vehicle+ ' move westward'),
  step(Vehicle, NextPlace) at T1.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == eastward,
  NewX = X + 5,
  NextPlace = coordinate(NewX, Y),
  % testPrint(Vehicle+ ' move eastward'),
  step(Vehicle, NextPlace) at T1.

clearRoute(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), _),
  goal(Vehicle,coordinate(P, Q)),
  location(Vehicle2, coordinate(A, B), _),
  Vehicle != Vehicle2,
  Y == Q,
  B != Q.

clearRoute(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), _),
  goal(Vehicle,coordinate(P, Q)),
  location(Vehicle2, coordinate(A, B), _),
  Vehicle != Vehicle2,
  A < X,
  A < P.

clearRoute(Vehicle) at T<-
  location(Vehicle, coordinate(X, Y), _),
  goal(Vehicle,coordinate(P, Q)),
  location(Vehicle2, coordinate(A, B), _),
  Vehicle != Vehicle2,
  A > X,
  A > P.
% ---------------------------------------------------------------------------------------------
%step is false if the car is moving into a junction, not on main Road and there is a collision.
% this part need further developemnt for other cases


% if you dont have a clear route you can not step
<- step(Vehicle, NextPlace),
  collisionPossible(Vehicle, Vehicle2) at T,
  Vehicle != Vehicle2,
  not clearRoute(Vehicle) at T.



% both car have clear routes but car on main street can not step
<- step(Vehicle, NextPlace),
  not onMainRoad(Vehicle) at T,
  collisionPossible(Vehicle, Vehicle2) at T,
  Vehicle != Vehicle2,
  clearRoute(Vehicle) at T,
  clearRoute(Vehicle2) at T.

% both car have clear routes and both on the same street and have the same goal.
<- step(Vehicle, NextPlace),
  onMainRoad(Vehicle) at T,
  collisionPossible(Vehicle, Vehicle2) at T,
  Vehicle != Vehicle2,
  onMainRoad(Vehicle2) at T,
  clearRoute(Vehicle) at T,
  clearRoute(Vehicle2) at T,
  goal(Vehicle,coordinate(X, Y)),
  goal(Vehicle2,coordinate(A, B)),
  A == X,
  B == Y.

% this is also not perfect need further development
<- step(Vehicle, NextPlace),
  collisionPossible(Vehicle, Vehicle2) at T,
  stopped(Vehicle2).

% case where car should not step forward is that your goal is on your left but you are facing in a wrong direction
<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  % street(_, coordinate(A, B), Width, Height, _, _),
  goal(Vehicle,coordinate(C, D)),
  A == C,
  D < B,
  Direction != northward.

% this bit need furter improvement.
<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  % street(_, coordinate(A, B), Width, Height, _, _),
  goal(Vehicle,coordinate(C, D)),
  A == C,
  D > B,
  Direction != southward.

<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  % street(_, coordinate(A, B), Width, Height, _, _),
  goal(Vehicle,coordinate(C, D)),
  D == B,
  C < A,
  Direction != westward.

<- step(Vehicle, NextPlace),
  location(Vehicle, coordinate(A, B), Direction),
  % street(_, coordinate(A, B), Width, Height, _, _),
  goal(Vehicle,coordinate(C, D)),
  D == B,
  C > A,
  Direction != eastward.

collisionPossible(Vehicle1, Vehicle2) at T <-

  location(Vehicle1, coordinate(X, Y), Direction1) at T,
  location(Vehicle2, coordinate(A, B), Direction2) at T,
  Vehicle1 != Vehicle2,
  % testPrint('collisionPossible' + Vehicle1 + ' '+Vehicle2),
  % there is a collision possiblity if the two direction are not the same
  % Direction1 != Direction2,
  warningZone(coordinate(X, Y),coordinate(A, B)).

% warnning zone is two times the length of the car plus 10
warningZone(coordinate(X, Y),coordinate(A, B)) <-
  Manhattan = abs(X-A) + abs(Y-B),
  % 80 is two times the length of the car.
  Manhattan <= 90.

onMainRoad(Vehicle) at T <-
  location(Vehicle, coordinate(X, Y), Direction1) at T,
  street(StreetName, coordinate(A, B), Width, Height, Number_of_lane, Priority),
  X<=A+Width, X>=A,
  Y<=B+Height, Y>=B,
  Priority > 0.


% ---------------------------------------------------------------------------------------------


updates(step(Vehicle, NextPlace), location(VehicleIns, OldPlace, Direction),  location(VehicleIns, NextPlace, Direction))<-
  VehicleIns == Vehicle.
  % ('updating loc ' + Vehicle + ' '+ NextPlace).

updates(turn(Vehicle, NewHeading) , location(VehicleIns, Place, OldHeading), location(VehicleIns, Place, NewHeading))<-
  Vehicle == VehicleIns.
  % ('updating turing ' + Vehicle + ' '+NewHeading).

terminates(arrive(Vehicle), moving(Vehicle)).
initiates(arrive(Vehicle), stopped(Vehicle)).

% % decision making will give a waiting state if car is not stopped
% terminates(decision_making(Vehicle), moving(Vehicle))<- not stopped(Vehicle).
% initiates(decision_making(Vehicle), waitting(Vehicle))<- not stopped(Vehicle).
