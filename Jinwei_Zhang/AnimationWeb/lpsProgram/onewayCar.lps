% we assume the destination is reachable
maxTime(50).
cycleInterval(10).

loadModule('../scripts/module.js').

fluents([
   coordinate(X, Y),
   location(VehicleName, coordinate(X, Y), Direction),
   trafficLight(coordinate(X, Y), Working_status, Color, FacingDirection),
   street(StreetName, coordinate(X, Y), Width, Height, Number_of_lane),
   goal(VehicleName,coordinate(X, Y))
]).

% events will reserved for traffic lights
events ([

]).

actions ([
  step(Vehicle, NextPlace),
  turn(Vehicle, NewHeading)
]).

initially([
  location(carA, coordinate(120, 225), eastward),
  goal(carA,coordinate(800, 225)),
  street(mainStreet , coordinate(100, 200), 900, 50, 1)
]).

goal(Vehicle,coordinate(A, B)) from _ to T,
location(Vehicle, coordinate(X, Y), Direction), A!=X at T ->
  % need to find the right direction here
  % driving forward
    drive(Vehicle) from T to _.

goal(Vehicle,coordinate(A, B)) from _ to T,
location(Vehicle, coordinate(X, Y), Direction), B!=Y at T ->
  % need to find the right direction here
  % driving forward
    drive(Vehicle) from T to _.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == northward,
  NewY = Y - 10,
  NextPlace = coordinate(X, NewY),
  step(Vehicle, NextPlace) from T1 to T2.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == southward,
  NewY = Y + 10,
  NextPlace = coordinate(X, NewY),
  step(Vehicle, NextPlace) from T1 to T2.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == westward,
  NewX = X-10,
  NextPlace = coordinate(NewX, Y),
  step(Vehicle, NextPlace) from T1 to T2.

drive(Vehicle) from T to T1 <-
  location(Vehicle, coordinate(X, Y), Direction),
  Direction == eastward,
  NewX = X + 10,
  NextPlace = coordinate(NewX, Y),
  step(Vehicle, NextPlace) from T1 to T2.

% on(coordinate(X,Y),Street) <-



updates(step(Vehicle, NextPlace), location(Vehicle, OldPlace, Direction),  location(Vehicle, NextPlace, Direction)).

updates(turn(Vehicle, NewHeading) , location(Vehicle, Place, OldHeading), location(Vehicle, Place, NewHeading)).


% you  can not move (x++) if you are not facing eastward
