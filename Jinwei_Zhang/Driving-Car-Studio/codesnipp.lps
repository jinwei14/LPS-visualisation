loadModule('./modules/module.js').
true -> testPrint('The car has started').


% set of facts.
fluents([
  move, stop, waitting
]).

% cause state transition via init fact terminate fact
events ([redLight,greenLight]).

% Reactive rules
actions ([arrival]).
action(fireTruckMove/2).

% describes the facts that are true at time 1
initially( move).

lpsDefineObject(car, image, [
  position(150, 340),
  size(64, 64),
  isHidden(0),
  image(car),
  zIndex(100)
]).

% describe events taking place in the transition from one time point to the next
observe(redLight,1,2).
observe(greenLight,3,4).
observe(redLight,7,8).
observe(greenLight,9,10).

%stop at time 13
move(12)->
   arrival(12,13),
   testPrint('I have stopped at time 13').


move(T1) ->
  testPrint('I am moving'),
  lpsAnimateMoveObject(car, 2, 250, 340) from T1 to T2,
  fireTruckMove(250, 340) from T1 to T2.

initiates(redLight, waitting) <- move.
terminates(redLight, move) <- move.
initiates(greenLight, move) <- waitting.
terminates(greenLight, waitting) <-waitting.
initiates(arrival, stop) <- move.
terminates(arrival, move) <- move.
