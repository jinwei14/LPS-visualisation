% --- Specification generated for test/programs/mark.lps
% --- Start of cycle 1 ---
expect_num_of(fluent, 1, 1).
  expect(fluent, 1, thirsty(mark)).

% --- Start of cycle 2 ---
expect_num_of(fluent, 2, 2).
  expect(fluent, 2, thirsty(mark)).
  expect(fluent, 2, drinking(mark)).
expect_num_of(action, 1, 2, 1).
  expect(action, 1, 2, reach(mark, glass, right)).
expect_num_of(observation, 1, 2, 0).
expect_num_of(firedRules, 2, 1).
expect_num_of(resolvedGoals, 2, 0).
expect_num_of(unresolvedGoals, 2, 1).
expect_num_of(failedGoals, 2, 0).

% --- Start of cycle 3 ---
expect_num_of(fluent, 3, 2).
  expect(fluent, 3, thirsty(mark)).
  expect(fluent, 3, drinking(mark)).
expect_num_of(action, 2, 3, 1).
  expect(action, 2, 3, grab(mark, glass, right)).
expect_num_of(observation, 2, 3, 0).
expect_num_of(firedRules, 3, 0).
expect_num_of(resolvedGoals, 3, 0).
expect_num_of(unresolvedGoals, 3, 1).
expect_num_of(failedGoals, 3, 0).

% --- Start of cycle 4 ---
expect_num_of(fluent, 4, 2).
  expect(fluent, 4, thirsty(mark)).
  expect(fluent, 4, drinking(mark)).
expect_num_of(action, 3, 4, 1).
  expect(action, 3, 4, raise(mark, glass, right)).
expect_num_of(observation, 3, 4, 0).
expect_num_of(firedRules, 4, 0).
expect_num_of(resolvedGoals, 4, 0).
expect_num_of(unresolvedGoals, 4, 1).
expect_num_of(failedGoals, 4, 0).

% --- Start of cycle 5 ---
expect_num_of(fluent, 5, 1).
  expect(fluent, 5, empty(glass)).
expect_num_of(action, 4, 5, 1).
  expect(action, 4, 5, sip(mark, glass)).
expect_num_of(observation, 4, 5, 0).
expect_num_of(firedRules, 5, 0).
expect_num_of(resolvedGoals, 5, 0).
expect_num_of(unresolvedGoals, 5, 1).
expect_num_of(failedGoals, 5, 0).

% --- Start of cycle 6 ---
expect_num_of(fluent, 6, 1).
  expect(fluent, 6, empty(glass)).
expect_num_of(action, 5, 6, 1).
  expect(action, 5, 6, putdown(mark, glass)).
expect_num_of(observation, 5, 6, 0).
expect_num_of(firedRules, 6, 0).
expect_num_of(resolvedGoals, 6, 1).
expect_num_of(unresolvedGoals, 6, 0).
expect_num_of(failedGoals, 6, 0).

% --- Start of cycle 7 ---
expect_num_of(fluent, 7, 1).
  expect(fluent, 7, empty(glass)).
expect_num_of(action, 6, 7, 0).
expect_num_of(observation, 6, 7, 0).
expect_num_of(firedRules, 7, 0).
expect_num_of(resolvedGoals, 7, 0).
expect_num_of(unresolvedGoals, 7, 0).
expect_num_of(failedGoals, 7, 0).

% --- Start of cycle 8 ---
expect_num_of(fluent, 8, 0).
expect_num_of(action, 7, 8, 0).
expect_num_of(observation, 7, 8, 1).
  expect(observation, 7, 8, refill(glass)).
expect_num_of(firedRules, 8, 0).
expect_num_of(resolvedGoals, 8, 0).
expect_num_of(unresolvedGoals, 8, 0).
expect_num_of(failedGoals, 8, 0).

% --- Start of cycle 9 ---
expect_num_of(fluent, 9, 0).
expect_num_of(action, 8, 9, 0).
expect_num_of(observation, 8, 9, 0).
expect_num_of(firedRules, 9, 0).
expect_num_of(resolvedGoals, 9, 0).
expect_num_of(unresolvedGoals, 9, 0).
expect_num_of(failedGoals, 9, 0).

% --- Start of cycle 10 ---
expect_num_of(fluent, 10, 0).
expect_num_of(action, 9, 10, 0).
expect_num_of(observation, 9, 10, 0).
expect_num_of(firedRules, 10, 0).
expect_num_of(resolvedGoals, 10, 0).
expect_num_of(unresolvedGoals, 10, 0).
expect_num_of(failedGoals, 10, 0).

