% --- Specification generated for test/programs/fire-recurrent.lps
% --- Start of cycle 1 ---
expect_num_of(fluent, 1, 1).
  expect(fluent, 1, water).

% --- Start of cycle 2 ---
expect_num_of(fluent, 2, 2).
  expect(fluent, 2, water).
  expect(fluent, 2, fire).
expect_num_of(action, 1, 2, 0).
expect_num_of(observation, 1, 2, 1).
  expect(observation, 1, 2, ignite(sofa)).
expect_num_of(firedRules, 2, 1).
expect_num_of(resolvedGoals, 2, 0).
expect_num_of(unresolvedGoals, 2, 1).
expect_num_of(failedGoals, 2, 0).

% --- Start of cycle 3 ---
expect_num_of(fluent, 3, 0).
expect_num_of(action, 2, 3, 1).
  expect(action, 2, 3, eliminate).
expect_num_of(observation, 2, 3, 0).
expect_num_of(firedRules, 3, 1).
expect_num_of(resolvedGoals, 3, 2).
expect_num_of(unresolvedGoals, 3, 0).
expect_num_of(failedGoals, 3, 0).

% --- Start of cycle 4 ---
expect_num_of(fluent, 4, 0).
expect_num_of(action, 3, 4, 0).
expect_num_of(observation, 3, 4, 0).
expect_num_of(firedRules, 4, 0).
expect_num_of(resolvedGoals, 4, 0).
expect_num_of(unresolvedGoals, 4, 0).
expect_num_of(failedGoals, 4, 0).

% --- Start of cycle 5 ---
expect_num_of(fluent, 5, 1).
  expect(fluent, 5, fire).
expect_num_of(action, 4, 5, 0).
expect_num_of(observation, 4, 5, 1).
  expect(observation, 4, 5, ignite(bed)).
expect_num_of(firedRules, 5, 1).
expect_num_of(resolvedGoals, 5, 0).
expect_num_of(unresolvedGoals, 5, 1).
expect_num_of(failedGoals, 5, 0).

% --- Start of cycle 6 ---
expect_num_of(fluent, 6, 1).
  expect(fluent, 6, fire).
expect_num_of(action, 5, 6, 1).
  expect(action, 5, 6, escape).
expect_num_of(observation, 5, 6, 0).
expect_num_of(firedRules, 6, 2).
expect_num_of(resolvedGoals, 6, 3).
expect_num_of(unresolvedGoals, 6, 0).
expect_num_of(failedGoals, 6, 0).

% --- Start of cycle 7 ---
expect_num_of(fluent, 7, 1).
  expect(fluent, 7, fire).
expect_num_of(action, 6, 7, 1).
  expect(action, 6, 7, escape).
expect_num_of(observation, 6, 7, 0).
expect_num_of(firedRules, 7, 2).
expect_num_of(resolvedGoals, 7, 2).
expect_num_of(unresolvedGoals, 7, 0).
expect_num_of(failedGoals, 7, 0).

% --- Start of cycle 8 ---
expect_num_of(fluent, 8, 2).
  expect(fluent, 8, water).
  expect(fluent, 8, fire).
expect_num_of(action, 7, 8, 1).
  expect(action, 7, 8, escape).
expect_num_of(observation, 7, 8, 1).
  expect(observation, 7, 8, refill).
expect_num_of(firedRules, 8, 2).
expect_num_of(resolvedGoals, 8, 2).
expect_num_of(unresolvedGoals, 8, 0).
expect_num_of(failedGoals, 8, 0).

% --- Start of cycle 9 ---
expect_num_of(fluent, 9, 0).
expect_num_of(action, 8, 9, 1).
  expect(action, 8, 9, eliminate).
expect_num_of(observation, 8, 9, 0).
expect_num_of(firedRules, 9, 1).
expect_num_of(resolvedGoals, 9, 1).
expect_num_of(unresolvedGoals, 9, 0).
expect_num_of(failedGoals, 9, 0).

% --- Start of cycle 10 ---
expect_num_of(fluent, 10, 0).
expect_num_of(action, 9, 10, 0).
expect_num_of(observation, 9, 10, 0).
expect_num_of(firedRules, 10, 0).
expect_num_of(resolvedGoals, 10, 0).
expect_num_of(unresolvedGoals, 10, 0).
expect_num_of(failedGoals, 10, 0).

