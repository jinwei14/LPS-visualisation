loadModule('./modules/module.js').
true -> testPrint('The car has started').


% set of facts.
fluents([
  moving, stop, waitting, car_location(_,_,_)
]).

% cause state transition via init fact terminate fact
events ([redLight,greenLight,carMoveTo(Obj,Loc_X, Loc_Y)]).

% Reactive rules
actions ([arrival]).


% describes the facts that are true at time 1
initially([
  moving,
  car_location(car1, 152, 340, 0),
  car_location(car2, 520, 650, 0)
]).



lpsDefineObject(car1, image, [
  position(150, 340),
  size(64, 64),
  isHidden(0),
  image(car1),
  zIndex(100)
]).

lpsDefineObject(car2, image, [
  position(520, 650),
  size(64, 64),
  isHidden(0),
  image(car2),
  zIndex(100)
]).

% describe events taking place in the transition from one time point to the next
observe(redLight,1,2).
observe(greenLight,3,4).
observe(redLight,7,8).
observe(greenLight,9,10).

%stop at time 13
moving(12)->
   arrival(12,13),
   testPrint('I have stopped at time 13').


moving(T) , location(car1,X, Y, T)->

  testPrint('I am moving to'),
  testPrint(X),
  X1 = X + 2,
  Y1 = Y + 2,
  carMoveTo(car1, X1, Y1, T0, T1),
  % fireTruckPosition(X, Y, T1),
  % townPosition(trafficLight1, _, Tx, Ty),
  % NumCyclesNeeded = floor(abs(X - Tx) / 64),
  % T2 = T1 + NumCyclesNeeded,
  % cycleInterval(CT),
  % AnimationDuration = CT * NumCyclesNeeded,
  lpsAnimateMoveObject(car1, 2, X1, Y1) from T0 to T1.

 % carMoveTo(X1, Y1) <-
 %  testPrint('I update the positions to'),
 %  testPrint(X1),
 %  carMove(X1, Y1).

location(Obj,X, Y,T) <-
  moving,
  car_location(car1, 152, 340).



waitting(T3) ->
  testPrint('I am waitting in Time'),
  testPrint(T3).



% lpsShowObject(Id) from T1 to T2 <-
%   lpsUpdateObject(Id, [
%     isHidden(0)
%   ]) from T1 to T2.
%
% lpsHideObject(Id) from T1 to T2 <-
%   lpsUpdateObject(Id, [
%     isHidden(1)
%   ]) from T1 to T2.
%
% lpsAnimateMoveObject(Id, Duration, X, Y) from T1 to T2 <-
%   lpsAnimateObject(Id, Duration, [
%     position(X, Y)
%   ]) from T1 to T2.
%
% lpsDefineObject(Id, Type, []) <-
%   lpsDefineObject(Id, Type).



% have a lot of questions here!!!!!!!!!!!!!!!!!!!!!!!


updates(carMove(Obj,X, Y), car_location(Obj,_, _), car_location(Obj,X, Y)).
% %   % car_location(NOWx, NOWy),
% %   % X1 = NOWx + 2,
% %   % Y1 = NOWy + 2.
% %
% %   X22 = X,
% %   Y22 = Y.

% updates(sample(Pos), left(_), left(Mid)) <-
%   searching(X, T),
%   a(Pos, AX),
%   AX < X,
%   Mid = Pos + 1.

% initiates(carMoveTo(X1, Y1), car_location(500, 500))<-
%   moving.

% terminates(carMoveTo(OLD, OLD), car_location(OLD, OLD))<-
%   moving.




initiates(redLight, waitting) <-
  moving.

terminates(redLight, moving) <-
  moving.

initiates(greenLight, moving) <-
  waitting.

terminates(greenLight, waitting) <-
  waitting.

initiates(arrival, stop) <-
  moving.

terminates(arrival, moving) <-
  moving.


%
% %------------------------------------------------------------
%
%
%   %%%%%%%%%%%%%%%%%%% LPS JS %%%%%%%%%%%%%%%%%%%%%%%%
%   maxTime(5).
%   fluent(fire).
%   actions([eliminate, escape]).
%   event(deal_with_fire).
%
%   initially(fire).
%
%   fire(T1) -> deal_with_fire(T1, T2).
%
%   deal_with_fire(T1, T2) <- eliminate(T1, T2).
%   deal_with_fire(T1, T2) <- escape(T1, T2).
%
%   terminates(eliminate, fire).
%
%   %%%%%%%%%%%%%%%%% Swish %%%%%%%%%%%%%%%%%%%%%%%
%
%   maxTime(5).
%
%   fluents 	fire.
%   actions 	eliminate, escape.
%   events 		deal_with_fire.
%
%   initially 	fire.
%   % reactive rules if fluents then action
%   if 		fire at T1
%   then 	deal_with_fire from T1 to T2.
%
%   %law of cause event/action dowhat if fluent
%   deal_with_fire from T1 to T2
%   if 		eliminate from T1 to T2.
%
%   deal_with_fire from T1 to T2
%   if		 escape from T1 to T2.
%
%   eliminate  terminates fire.
%
%
%   /** <examples>
%   ?- go(Timeline).
%   */
